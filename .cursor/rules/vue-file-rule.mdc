---
description: 
globs: 
alwaysApply: true
---
# Vue项目文件组织最佳实践

## 关于JS/Vue/CSS分离问题

### 单文件组件(SFC)与分文件方式对比

#### 单文件组件(SFC)优势：

1. 组件内部高内聚，便于理解组件整体功能
2. 减少文件切换成本，提高开发效率
3. Vue官方推荐方式，工具链支持完善
4. 组件逻辑、样式、模板的联系一目了然

#### 分文件方式优势：

1. 更清晰的关注点分离
2. 大型复杂组件时内容组织更清晰
3. 专业分工团队中便于并行开发
4. CSS可独立被其他组件复用

## 建议方案

对于当前工作流编辑器项目，推荐采用折中方案：

1. 基础组件：保持SFC格式，因其逻辑简单且高内聚
2. 复杂节点组件：考虑拆分为：
    - ComponentName.vue - 主要模板和基础逻辑
    - ComponentName.logic.ts - 复杂业务逻辑
    - ComponentName.styles.scss - 独立样式文件

3. 公共样式：提取到独立文件：
    - node-common.scss - 所有节点共享样式
    - theme-variables.scss - 主题变量

## 最佳工程实践目录结构

### 整体项目结构

```bash
src/
├── assets/               # 静态资源
├── components/           # 全局通用组件
│   ├── common/           # 最基础的通用组件
│   └── workflow/         # 工作流相关组件
│       ├── nodes/        # 节点组件
│       ├── panels/       # 面板组件
│       └── utils/        # 工作流工具函数
├── composables/          # 全局可复用的组合式函数
├── config/               # 配置文件
├── constants/            # 常量定义
├── layouts/              # 布局组件
├── router/               # 路由配置
├── stores/               # 状态管理
│   └── modules/          # 按领域拆分的store模块
├── styles/               # 全局样式
│   ├── variables.scss    # 变量定义
│   └── mixins.scss       # 混入
├── types/                # TypeScript类型定义
├── utils/                # 通用工具函数
└── views/                # 页面组件
```

### 节点组件目录结构优化
```bash
components/workflow/nodes/
├── README.md                       # 文档
├── index.ts                        # 统一导出
├── BaseNode.vue                    # 基础节点组件
├── NodeHandle.vue                  # 连接点组件
├── useNodeFactory.ts               # 节点工厂Hook
├── types.ts                        # 节点相关类型定义
├── styles/                         # 节点样式
│   ├── node-common.scss            # 通用节点样式
│   └── themes/                     # 主题样式
│       ├── dark.scss               # 暗色主题
│       └── light.scss              # 亮色主题
├── control_flow/                   # 控制流节点
│   ├── index.ts                    # 统一导出
│   ├── StartNode/                  # 开始节点
│   │   ├── StartNode.vue           # 主组件
│   │   ├── StartNode.logic.ts      # 复杂逻辑(可选)
│   │   └── StartNode.styles.scss   # 独立样式(可选)
│   └── ... 其他控制流节点
├── ai_models/                      # AI模型节点
├── data_processing/                # 数据处理节点
├── tools/                          # 工具节点
└── integrations/                   # 集成节点
```


## 大型组件拆分示例

### StartNode.vue (主组件)

```vue
<template>
  <!-- 模板内容 -->
</template>

<script setup lang="ts">
import { useStartNodeLogic } from './StartNode.logic';
import './StartNode.styles.scss';

const props = defineProps(/* ... */);
const { /* 导出的方法和状态 */ } = useStartNodeLogic(props);
</script>
```

### StartNode.logic.ts (业务逻辑)
```typescript
import { computed, ref } from 'vue';
import useNodeFactory from '../../useNodeFactory';

export function useStartNodeLogic(props) {
  // 复杂业务逻辑实现
  // ...
  
  return {
    // 返回要在组件中使用的方法和状态
  };
}
```

## 最佳实践考量因素

1. 项目规模与团队结构
    - 小团队(1-5人)：单文件组件更简洁高效
    - 大团队(10+人)：拆分文件便于协作和重构
2. 复杂度与可维护性平衡
    - 不盲目追求拆分，保持合理内聚
    - 复杂度超过300行代码考虑拆分
3. 按领域划分优于按类型划分
    - 已实现的control_flow/、ai_models/等分类方式是最佳实践
    - 避免过度嵌套(不超过4级目录)
4. 工具链支持
    - 确保IDE和构建工具对目录结构和文件导入有良好支持
    - 添加TypeScript路径别名简化导入路径

当前@nodes目录采用的领域分类方式基本符合最佳实践，主要改进点在于为复杂组件提供更细粒度的文件拆分选项，以及加强类型定义系统。

